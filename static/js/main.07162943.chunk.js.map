{"version":3,"sources":["api/fetch.js","TodoItem.js","TodoList.js","App.js","index.js"],"names":["getData","URL","response","regenerator_default","a","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","TodoItem","_ref","item","react_default","createElement","id","title","completed","user","name","HEADERS","TodoList","list","_useState","useState","_useState2","Object","slicedToArray","todos","sortTodos","_useState3","_useState4","activeField","setActiveField","keys","map","header","onClick","field","callback","b","localeCompare","sort","toConsumableArray","reverse","sortList","key","todo","src_TodoItem","App","combinedPosts","setCombinedPosts","isLoaded","setLoaded","_useState5","_useState6","isLoading","setLoading","_useState7","_useState8","isError","setError","className","src_TodoList","Fragment","type","todosData","usersData","allData","objectSpread2","find","userId","t0","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.07162943.chunk.js","sourcesContent":["export const getData = async(URL) => {\n  const response = await fetch(URL);\n\n  return response.json();\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({ item }) => (\n  <tr>\n    <td>{item.id}</td>\n    <td>{item.title}</td>\n    <td>{item.completed ? 'Yes' : 'No'}</td>\n    <td>{item.user.name}</td>\n  </tr>\n);\n\nTodoItem.propTypes = { item: PropTypes.shape({\n  id: PropTypes.number,\n  title: PropTypes.string,\n  completed: PropTypes.bool,\n  user: PropTypes.shape({\n    name: PropTypes.string,\n  }),\n}).isRequired };\n\nexport default TodoItem;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nconst HEADERS = {\n  id: 'Id',\n  title: 'Description',\n  completed: 'Is completed?',\n  user: 'Responsible person',\n};\n\nconst TodoList = ({ list }) => {\n  const [todos, sortTodos] = useState(list);\n  const [activeField, setActiveField] = useState('id');\n\n  const sortList = (field) => {\n    let callback;\n\n    switch (typeof list[0][field]) {\n      case 'string':\n        callback = (a, b) => a[field].localeCompare(b[field]);\n        break;\n      case 'object':\n        callback = (a, b) => a[field].name.localeCompare(b[field].name);\n        break;\n      default:\n        callback = (a, b) => a[field] - b[field];\n    }\n\n    if (activeField !== field) {\n      sortTodos(todos.sort(callback));\n      setActiveField(field);\n    } else {\n      sortTodos([...todos].reverse());\n    }\n  };\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          {Object.keys(HEADERS).map(header => (\n            <th\n              onClick={() => sortList(header)}\n              key={header}\n            >\n              {HEADERS[header]}\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {todos.map(todo => (\n          <TodoItem key={todo.id} item={todo} />)\n        )}\n      </tbody>\n    </table>\n  );\n};\n\nTodoList.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.object\n  ).isRequired,\n};\n\nexport default TodoList;\n","import React, { useState } from 'react';\nimport { getData } from './api/fetch';\nimport TodoList from './TodoList';\nimport './App.css';\n\nconst TODOS_URL = 'https://jsonplaceholder.typicode.com/todos';\nconst USERS_URL = 'https://jsonplaceholder.typicode.com/users';\n\nconst App = () => {\n  const [combinedPosts, setCombinedPosts] = useState([]);\n  const [isLoaded, setLoaded] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [isError, setError] = useState(false);\n\n  const loadData = async() => {\n    setLoading(true);\n\n    try {\n      const todosData = await getData(TODOS_URL);\n      const usersData = await getData(USERS_URL);\n\n      const allData = todosData.map(todo => ({\n        ...todo,\n        user: usersData.find(user => user.id === todo.userId),\n      }));\n\n      setCombinedPosts(allData);\n      setLoading(false);\n      setLoaded(true);\n    } catch (e) {\n      setLoading(false);\n      setError(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of todos</h1>\n\n      {isLoaded ? (\n        <TodoList list={combinedPosts} />\n      ) : (\n        <>\n          <h2>{isError ? 'Error occured!!!' : 'No TodoList yet!'}</h2>\n\n          <button\n            className=\"load-btn\"\n            type=\"button\"\n            onClick={loadData}\n          >\n            {isLoading ? 'Loading...' : 'Load TodoList'}\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}